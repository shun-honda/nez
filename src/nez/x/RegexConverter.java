package nez.x;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.HashMap;

import nez.Grammar;
import nez.ast.AST;
import nez.ast.Node;
import nez.ast.Tag;
import nez.expr.Expression;
import nez.expr.Factory;
import nez.expr.Rule;
import nez.util.ConsoleUtils;
import nez.util.StringUtils;
import nez.util.UList;

public class RegexConverter extends GrammarConverter{
	HashMap<Integer, Method> methodMap = new HashMap<Integer, Method>();
	int NonTerminalCount = 0;
	public RegexConverter(Grammar grammar, String name) {
		super(grammar, name);
	}
	
	public final Expression pi(Node expr, Expression k) {
		Tag tag = expr.getTag();
		Method m = lookupPiMethod("pi", tag.id);
		if(m != null) {
			try {
				return (Expression)m.invoke(this, expr, k);
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				System.err.println(expr);
				e.printStackTrace();
			}
		}
		return null;
	}
	
	protected Method lookupPiMethod(String method, int tagId) {
		Integer key = tagId;
		Method m = this.methodMap.get(key);
		if(m == null) {
			String name = method + Tag.tag(tagId).getName();
			try {
				m = this.getClass().getMethod(name, AST.class, Expression.class);
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
				return null;
			} catch (SecurityException e) {
				return null;
			}
			this.methodMap.put(key, m);
		}
		return m;
	}
	
	public void convert(AST e) {
		UList<Expression> pattern = new UList<Expression>(new Expression[1]);
		pattern.add(pi(e, null));
		grammar.defineRule(e, "File", Factory.newNew(e, pattern));
		//System.out.println("\nConverted Rule: " + grammar.getResourceName());
		//grammar.dump();
		makeFile(e);
	}
	
	public void makeFile(AST e) {
		file.write("// This file is generated by src.nez.x.RegexConverter.java");
		file.writeIndent("// Generate Date: " + new Date().toString());
		file.writeIndent("// Input regex :  " + e.getText());
		file.writeIndent("\n");
		for(Rule r : grammar.getRuleList()) {
			file.write(r.toString());
			file.writeIndent("\n");
		}
		file.flush();
	}
	
	public Expression piPattern(AST e, Expression k) {
		return this.pi(e.get(0), k);
	}

	// pi(e, k) e: regular expression, k: continuation
	// pi(e1|e2, k) = pi(e1, k) / pi(e2, k)
	public Expression piOr(AST e, Expression k) {
		return toChoice(e, pi(e.get(0), k), pi(e.get(1), k));
	}

	// pi(e1e2, k) = pi(e1, pi(e2, k))
	public Expression piConcatenation(AST e, Expression k) {
		return pi(e.get(0), pi(e.get(1), k));
	}

	// pi((e1|e2), k) = pi((e1)|(e2), k)
	// pi((e), k) = @{ pi(e, "") } k
	public Expression piCapture(AST e, Expression k) {
		AST child = e.get(0);
		if (child.getTag().equals(Tag.tag("Or"))) {
			Node capLeft = child.newNode(Tag.tag("Capture"), e.getSource(), 0, 0, 1);
			Node capRight = child.newNode(Tag.tag("Capture"), e.getSource(), 0, 0, 1);
			capLeft.link(0, child.get(0));
			capRight.link(0, child.get(1));
			child.link(0, capLeft);
			child.link(1, capRight);
			return pi(child, k);
		}
		else {
			return toSeq(e, toNew(e.get(0), toEmpty(e)), k);
		}
	}

	// pi((?>e), k) = pi(e, "") k
	public Expression piIndependentExpr(AST e, Expression k) {
		return toSeq(e, pi(e.get(0), toEmpty(e)), k);
	}

	// pi((?=e), k) = &pi(e, "") k
	public Expression piAnd(AST e, Expression k) {
		return toAnd(e, k);
	}

	// pi((?!e), k) = !pi(e, "") k
	public Expression piNot(AST e, Expression k) {
		return toNot(e, k);
	}

	// pi(e*+, k) = pi(e*, "") k
	public Expression piPossessiveRepetition(AST e, Expression k) {
		return toSeq(e, piRepetition(e, toEmpty(e)), k);
	}

	// pi(e*?, k) = A, A <- k / pi(e, A)
	public Expression piLazyQuantifiers(AST e, Expression k) {
		String ruleName = "Repetition" + NonTerminalCount++;
		Expression ne = Factory.newNonTerminal(e, this.grammar, ruleName);
		grammar.defineRule(e, ruleName, toChoice(e, k, pi(e.get(0), ne)));
		return ne;
	}

	// pi(e*, k) = A, A <- pi(e, A) / k
	public Expression piRepetition(AST e, Expression k) {
		String ruleName = "Repetition" + NonTerminalCount++;
		Expression ne = Factory.newNonTerminal(e, this.grammar, ruleName);
		grammar.defineRule(e, ruleName, toChoice(e, pi(e.get(0), ne), k));
		return ne;
	}
	
	// pi(e?, k) = pi(e, k) / k
	public Expression piOption(AST e, Expression k) {
		return toChoice(e, pi(e.get(0), k), k);
	}

	public Expression piOneMoreRepetition(AST e, Expression k) {
		return pi(e.get(0), piRepetition(e, k));
	}

	public Expression piAny(AST e, Expression k) {
		return toAny(e);
	}

	public Expression piNegativeCharacterSet(AST e, Expression k) {
		Expression nce = toSeq(e, Factory.newNot(e, toCharacterSet(e)), toAny(e));
		return toSeq(e, nce, k);
	}

	public Expression piCharacterSet(AST e, Expression k) {
		return toSeq(e, k);
	}

	public Expression piCharacterRange(AST e, Expression k) {
		return toSeq(e, k);
	}
	
	public Expression piCharacterSetItem(AST e, Expression k) {
		return toSeq(e, k);
	}

	// pi(c, k) = c k
	// c: single character
	public Expression piCharacter(AST c, Expression k) {
		return toSeq(c, k);
	}
	
	private Expression toExpression(AST e) {
		return (Expression)this.visit("to", e);
	}
	
	public Expression toCharacter(AST c) {
		String text = c.getText();
		byte[] utf8 = StringUtils.toUtf8(text);
		if (utf8.length !=1) {
			ConsoleUtils.exit(1, "Error: not Character Literal");
		}
		return Factory.newByteChar(null, utf8[0]);
	}
	
	boolean byteMap[];
	boolean useByteMap = true;
	public Expression toCharacterSet(AST e) {
		UList<Expression> l = new UList<Expression>(new Expression[e.size()]);
		byteMap = new boolean[257];
		for(AST subnode: e) {
			Factory.addChoice(l, toExpression(subnode));
		}
		if (useByteMap) {
			return Factory.newByteMap(null, byteMap);
		}
		else {
			return Factory.newChoice(null, l);
		}
	}
	
	public Expression toCharacterRange(AST e) {
		byte[] begin = StringUtils.toUtf8(e.get(0).getText());
		byte[] end = StringUtils.toUtf8(e.get(1).getText());
		for(byte i = begin[0]; i <= end[0]; i++) {
			byteMap[i] = true;
		}
		return Factory.newCharSet(null, e.get(0).getText(), e.get(1).getText());
	}
	
	public Expression toCharacterSetItem(AST c) {
		byte[] utf8 = StringUtils.toUtf8(c.getText());
		byteMap[utf8[0]] = true;
		return Factory.newByteChar(null, utf8[0]);
	}
	
	public Expression toEmpty(AST node) {
		return Factory.newEmpty(null);
	}

	public Expression toAny(AST e) {
		return Factory.newAnyChar(null);
	}
	
	public Expression toAnd(AST e, Expression k) {
		return toSeq(e, Factory.newAnd(null, pi(e.get(0), toEmpty(e))), k);
	}
	
	public Expression toNot(AST e, Expression k) {
		return toSeq(e, Factory.newNot(null, pi(e.get(0), toEmpty(e))), k);
	}

	public Expression toChoice(AST node, Expression e, Expression k) {
		UList<Expression> l = new UList<Expression>(new Expression[2]);
		Factory.addChoice(l, e);
		if (k != null) {
			Factory.addChoice(l, k);
		}
		else {
			Factory.addChoice(l, toEmpty(node));
		}
		return Factory.newDirectChoice(null, l);
	}

	public Expression toSeq(AST e, Expression k) {
		UList<Expression> l = new UList<Expression>(new Expression[2]);
		Factory.addSequence(l, toExpression(e));
		if(k != null) {
			Factory.addSequence(l, k);
		}
		return Factory.newSequence(null, l);
	}
	
	public Expression toSeq(AST node, Expression e, Expression k) {
		UList<Expression> l = new UList<Expression>(new Expression[2]);
		Factory.addSequence(l, e);
		if (k != null) {
			Factory.addSequence(l, k);
		}
		return Factory.newSequence(null, l);
	}

	public Expression toNew(AST e, Expression k) {
		UList<Expression> l = new UList<Expression>(new Expression[1]);
		Factory.addSequence(l, pi(e, k));
		return Factory.newLink(null, Factory.newNew(null, l), -1);
	}

	@Override
	public String getDesc() {
		return "regex";
	}
}
